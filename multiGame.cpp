/*
 * multiGame.cpp
 *
 *  Created on: Aug 1, 2014
 *      Author: brandon
 */

#include <iostream>
#include <string>
#include <vector>

#include "SwansonLibs/swansonUtils.hpp"

#include "SwansonObjects/ArgReader.hpp"
#include "SwansonObjects/menu.hpp"
#include "SwansonObjects/Dictionary.hpp"
#include "SwansonObjects/PreFabDictionary.hpp"

#include "NumberGuess.hpp"
#include "wordGuess.hpp"
#include "phraseGuess.hpp"

#include "GameClass.hpp"

using namespace std;

//command line arguments
const string SIMPLE_MODE = "-s";

//Output Strings
const string INTRO = "Welcome to the Game Console";
const string AGAIN = "Would you like to play again";

//global variables
NumberGuess *myNumberGame;
WordGuess *myWordGame;
PhraseGuess *myPhraseGame;
ListItem *DifficultyChooser;
bool ComputerGenerated = true;
Dictionary myDict;

//difficulty variables
const string EASY = "Easy";
const string MED = "Medium";
const string HARD = "Hard";
string DifficultySelected = MED;

const int EASY_GUESS = 7;
const int MED_GUESS = 5;
const int HARD_GUESS = 3;

const int EASY_NUMBER = 20;
const int MED_NUMBER = 50;
const int HARD_NUMBER = 100;

const int EASY_WORD = 5;
const int MED_WORD = 7;
const int HARD_WORD = 8;

/////////////////////////////////////////
///////////////function prototypes//////
////////////////////////////////////////

//begin number guess game
void PlayNumberGuess ();
//begin word guess game
void PlayWordGuess ();
//begin Phrase guess game
void PlayPhraseGuess ();
//change settings in all 3 games according to difficulty
//selected by menu and retrieved through DifficultyChooser->getSelection
void ChangeDifficulty ();
//Instantiate a new dictionary, max length is changed for different difficulties
void SetDictionary ( int maxLength );

int main ( int argc , char* argv[] ) {

   const int MAX_WORD_LENGTH = 7;
   Menu myMenu( INTRO );

   ///process command line arguments//////////////
   //args passed to ARGinAttor
   ARGinAttor myARGinAttor( argc , argv );

   swansonUtil::SeedRandom();

   //instance a dictionary
   SetDictionary( MED_WORD );

   //instance 3 games
   myNumberGame = new NumberGuess;
   myWordGame = new WordGuess( myDict );
   myPhraseGame = new PhraseGuess( myDict );

   //check Arginators arguement set<string> for -s SIMPLE MODE
   if ( myARGinAttor.ArgumentPassedIn( SIMPLE_MODE ) ) {
      myMenu.setClear( swansonUtil::HackClearScreen );
      myNumberGame->SetClearScreen( swansonUtil::HackClearScreen );
      myWordGame->SetClearScreen( swansonUtil::HackClearScreen );
      myPhraseGame->SetClearScreen( swansonUtil::HackClearScreen );
   }

   ///filling menu
   myMenu.addItem( new GoItem( PlayNumberGuess , "NumberGuess" , "" , AGAIN ) );
   myMenu.addItem( new GoItem( PlayWordGuess , "Word Guess" , "" , AGAIN ) );
   myMenu.addItem(
         new GoItem( PlayPhraseGuess , "Phrase Guess" , "" , AGAIN ) );
   myMenu.addItem(
         new BoolItem( ComputerGenerated , "Secret is generated by" ,
               "Computer" , "Human" ) );

   //dificulty setting
   vector<string> difficulties;
   difficulties.push_back( EASY );
   difficulties.push_back( MED );
   difficulties.push_back( HARD );
   DifficultyChooser = new ListItem( difficulties , "Difficulty" , 1 );
   myMenu.addItem( DifficultyChooser );

   myMenu.showMenu();

}

/////////////////////////////////////////
///////////////function definitions//////
////////////////////////////////////////

/**************************************************************
 *
 * * Entry: an instance of NumberGame pointed to by myNumberGame
 *
 * * Exit: PlayGame() function is entered
 *
 * * Purpose: apply menu selected setting and begin the game
 *
 * ***************************************************************/
void PlayNumberGuess () {
   myNumberGame->SetComputerGeneratedSecret( ComputerGenerated );
   if ( DifficultySelected != DifficultyChooser->GetSelection() )
      ChangeDifficulty();
   myNumberGame->PlayGame();
}

/**************************************************************
 *
 * * Entry: an instance of WordGame pointed to by myWordGame
 *
 * * Exit: PlayGame() function is entered
 *
 * * Purpose: apply menu selected setting and begin the game
 *
 * ***************************************************************/
void PlayWordGuess () {
   myWordGame->SetComputerGeneratedSecret( ComputerGenerated );
   if ( DifficultySelected != DifficultyChooser->GetSelection() )
      ChangeDifficulty();
   myWordGame->PlayGame();
}

/**************************************************************
 *
 * * Entry: an instance of PhraseGame pointed to by myPhraseGame
 *
 * * Exit: PlayGame() function is entered
 *
 * * Purpose: apply menu selected setting and begin the game
 *
 * ***************************************************************/
void PlayPhraseGuess () {
   myPhraseGame->SetComputerGeneratedSecret( ComputerGenerated );
   if ( DifficultySelected != DifficultyChooser->GetSelection() )
      ChangeDifficulty();
   myPhraseGame->PlayGame();
}

/**************************************************************
 *
 * * Entry: DifficultyChooser points to an instance of ListItem containing
 *          A list of the strings {EASY,MED,HARD}
 *
 * * Exit: GuessNummber is adjusted for all 3 games
 *         A new dictionary is created with appropriate word length
 *         number range is adjusted for numberGame
 *
 * * Purpose: apply menu selected difficulty settings
 *
 * ***************************************************************/
void ChangeDifficulty () {
   DifficultySelected = DifficultyChooser->GetSelection();

   if ( DifficultySelected == EASY ) {
      myNumberGame->SetMaxGuesses( EASY_GUESS );
      myWordGame->SetMaxGuesses( EASY_GUESS );
      myPhraseGame->SetMaxGuesses( EASY_GUESS );

      myNumberGame->SetNumRange( EASY_NUMBER );
      SetDictionary( EASY_WORD );
      myWordGame->SetDictionary( myDict );
      myPhraseGame->SetDictionary( myDict );
   } else if ( DifficultySelected == HARD ) {

      myNumberGame->SetMaxGuesses( HARD_GUESS );
      myWordGame->SetMaxGuesses( HARD_GUESS );
      myPhraseGame->SetMaxGuesses( HARD_GUESS );

      myNumberGame->SetNumRange( HARD_NUMBER );
      SetDictionary( HARD_WORD );
      myWordGame->SetDictionary( myDict );
      myPhraseGame->SetDictionary( myDict );

   } else if ( DifficultySelected == MED ) {

      myNumberGame->SetMaxGuesses( MED_GUESS );
      myWordGame->SetMaxGuesses( MED_NUMBER );
      myPhraseGame->SetMaxGuesses( MED_NUMBER );

      myNumberGame->SetNumRange( MED_NUMBER );
      SetDictionary( MED_WORD );
      myWordGame->SetDictionary( myDict );
      myPhraseGame->SetDictionary( myDict );
   }
}

/**************************************************************
 *
 * * Entry: none
 *
 * * Exit: inflated dictionary with maxLength as its longest word(s)
 *
 * * Purpose: change word length to match difficulty
 *
 * ***************************************************************/
void SetDictionary ( int maxLength ) {
   myDict = Dictionary( maxLength );
   if ( !myDict.Filled() )
      myDict = PreFabDict::UsePreFabDict();
}

